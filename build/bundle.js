!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=6)}([function(e,t){e.exports=require("koa-router")},function(e,t){e.exports=require("koa")},function(e,t){e.exports=require("koa-body")},function(e,t){e.exports=require("url")},function(e,t){e.exports=require("lodash.merge")},function(e,t){e.exports=require("https")},function(e,t,r){"use strict";r.r(t);var n=r(1),o=r(2),u=r(3),i=r(4),a=r(5);var c=r(0);const s=new c;s.get("/:city",async(e,t)=>{console.log(e);const r=e.params.city,n=function(e,t={}){const r=new u.URL(e),n={host:r.hostname,path:r.pathname+r.search,method:"GET",headers:{"Content-Type":"application/json"}};return console.log("href is: ",r.href),i(n,t)}("http://"+"api.openweathermap.org/data/2.5/weather".concat(`?q=${r}&appid=d69002aec868feac44f30fcec92c2345&units=metric`),{timeout:2e3});e.body=await function(e,t=""){return new Promise((r,n)=>{let o="";console.log(e);const u=a.request(e,e=>{e.on("data",e=>{o+=e}),e.on("end",()=>{console.log(o),r(o)})});u.on("error",e=>{n(e.message)}),u.write(t),u.end()})}(n),await t});const f=s,l=new n,p=new c;l.use(o({urlencoded:!0})),l.use(f.routes()),l.use(p.routes()),l.use(p.allowedMethods()),l.listen(3004)}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,